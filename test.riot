let i: i8 = 127
let j: i8 = 3


fn suma(n: i8, n2: i8): i8 {
    return n + n2
}

fn resta(n: i8, n2: i8): i8 {
    return n - n2
}

10 |> suma(_,i) 
   |> resta(_,j)
   |> `Resultado: ${_}`
   |> print(_)

// fibonacci

fn fibonacci(n: i8): i8 {
    // without recursion

    let a: i8 = 0
    let b: i8 = 1
    let c: i8 = 0

    if (n == 0) {
        return a
    }

    for (let i: i8 = 2; i <= n; i++) {
        c = a + b
        a = b
        b = c
    }

    return b
}

let n: i8 = 10

n |> fibonacci(_) |> print(_)

let n: i8 = 10

for (let i of 0..n) {
    print(i)
}

const my_var: i8 = 0b1010

print(my_var)

match (n) {
    1 => print("uno"),
    2 => print("dos"),
    3 => print("tres"),
    10 => print("diez"),
    _ => print("otro")
}



// @animal
// class Persona extends Human {
//     static nombre: str = "d"
//     edad: i8 = 0

//     constructor(nombre: str, edad: i8): void {
//         super()
//     }

//     static async saludar(): void {
//         print(`Hola, soy ${this.nombre} y tengo ${this.edad} a√±os`)
//     }
// }




fn print_sum(a: i8 = 1): void  {
    let b: i8 = 2
    let c:i8 = a + b
    if (c == 3) {
        print("Suma correcta")
    } else {
        print("Suma incorrecta")
    }

}

print_sum()

print_sum(2)

